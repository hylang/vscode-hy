{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "hy",
	"patterns": [
		{
			"include": "#all"
		}
	],
	"repository": {
		"all":{
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include":"#constants"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#operators"
				},
				{
					"include": "#keysym"
				},
				{
					"include": "#builtin"
				},
				{
					"include": "#symbol"
				}
			]
		},
		"comment": {
			"patterns": [{
				"name":"comment.line.hy",
				"match": "(;).*$"
			}]
		},
		"constants": {
			"patterns": [{
				"name": "constant.numeric.hy",
				"match": "(?<=[\\{\\[\\(\\s])([0-9]+(\\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\\s;()'\",\\[\\]\\{\\}])"
			}]
		},
		"keywords": {
			"patterns": [{
				"name": "keyword.control.hy",
				"match": "\\b(and|await|match|let|annotate|assert|break|chainc|cond|continue|deftype|do|except\\*?|finally|else|defreader|([dgls])?for|set[vx]|defclass|defmacro|del|export|eval-and-compile|eval-when-compile|get|global|if|import|(de)?fn|nonlocal|not-in|or|(quasi)?quote|require|return|cut|raise|try|unpack-iterable|unpack-mapping|unquote|unquote-splice|when|while|with|yield|local-macros|in|is|py(s)?|pragma|nonlocal|(is-)?not)[\\s\\)]"
			},
		    {
				"name": "keyword.control.dot.hy",
				"match": "(?<=\\(\\s*)\\.[\\s\\)]"
			}]
		},
		"builtin": {
			"patterns": [{
				"name": "storage.builtin.hy",
				"match": "\\b(abs|all|any|ascii|bin|breakpoint|callable|chr|compile|delattr|dir|divmod|eval|exec|format|getattr|globals|hasattr|hash|hex|id|input|isinstance|issubclass|iter|aiter|len|locals|max|min|next|anext|oct|ord|pow|print|repr|round|setattr|sorted|sum|vars|False|None|True|NotImplemented|bool|memoryview|bytearray|bytes|classmethod|complex|dict|enumerate|filter|float|frozenset|property|int|list|map|object|range|reversed|set|slice|staticmethod|str|super|tuple|type|zip|open|quit|exit|copyright|credits|help)[\\s\\)]"
			},
		    {
				"name": "storage.builtin.dots.hy",
				"match": "(?<=\\(\\s*)\\.\\.\\.[\\s\\)]"
			}]
		},
		"operators":{
			"patterns": [{
				"name": "keyword.control.hy",
				"match": "(?<=\\()\\s*(\\+=?|\\/\\/?=?|\\*\\*?=?|--?=?|[!<>]?=|@=?|%=?|<<?=?|>>?=?|&=?|\\|=?|\\^|~@|~=?|#\\*\\*?)"
			}]
		},
		"strings": {
			"name": "string.quoted.double.hy",
			"begin": "(f?\"|}(?=[^\n]*?[{\"]))",
			"end": "(\"|(?<=[\"}][^\n]*?){)",
			"patterns": [
				{
					"name": "constant.character.escape.hy",
					"match": "\\\\."
				}
			]
		},
		"keysym": {
			"name": "variable.other.constant",
			"match": "(?<![\\.:\\w_\\-=!@\\$%^&?\\/<>*]):[\\.:\\w_\\-=!@\\$%^&?\\/<>*]*"
		},
		"symbol": {
			"name": "variable.other.hy",
			"match": "(?<![\\.:\\w_\\-=!@\\$%^&?/<>*#])[\\.a-zA-ZΑ-Ωα-ω_\\-=!@\\$%^<?/<>*#][\\.:\\w_\\-=!@\\$%^&?/<>*#]*"
		}
	},
	"scopeName": "source.hy"
}